import React, { useState, useEffect } from "react";
import axios from "axios";
import { Button, Table, Modal, Form, Container, Card, Spinner, Alert } from "react-bootstrap"; // Th√™m Spinner, Alert
import {
    FaPlus,
    FaEdit,
    FaTrash,
    FaSave,
    FaTimes,
    FaPlayCircle, // Th√™m icon n√†y
    FaExclamationTriangle, // Th√™m icon n√†y
    FaCheckCircle // Th√™m icon n√†y
} from "react-icons/fa";

const API_BASE_URL = "http://54.251.220.228:8080/trainingSouls/posts";

const PostManagement = () => {
    const [posts, setPosts] = useState([]);
    const [showEditModal, setShowEditModal] = useState(false);
    const [selectedPost, setSelectedPost] = useState(null);
    const [formData, setFormData] = useState({ id: null, title: "", content: "", imgUrl: "", videoUrl: "" });
    const [newPost, setNewPost] = useState({ title: "", content: "", imgUrl: "", videoUrl: "" });
    const [showCreateModal, setShowCreateModal] = useState(false);
    const [isLoading, setIsLoading] = useState(false); // State cho loading chung
    const [error, setError] = useState(null); // State cho l·ªói chung
    const [successMessage, setSuccessMessage] = useState(''); // State cho th√¥ng b√°o th√†nh c√¥ng

    useEffect(() => {
        fetchPosts();
    }, []);

    const clearMessages = () => {
        setError(null);
        setSuccessMessage('');
    }

    const fetchPosts = async () => {
        clearMessages();
        setIsLoading(true);
        try {
            const response = await axios.get(`${API_BASE_URL}/getAllPost`);
            // S·∫Øp x·∫øp b√†i vi·∫øt m·ªõi nh·∫•t l√™n ƒë·∫ßu (n·∫øu c√≥ tr∆∞·ªùng ng√†y t·∫°o, v√≠ d·ª• 'createdAt' ho·∫∑c 'id' gi·∫£m d·∫ßn)
            setPosts((response.data || []).sort((a, b) => (b.id || 0) - (a.id || 0)));
        } catch (error) {
            console.error("L·ªói khi l·∫•y danh s√°ch b√†i vi·∫øt:", error);
            setError(error.response?.data?.message || "Kh√¥ng th·ªÉ t·∫£i danh s√°ch b√†i vi·∫øt.");
            setPosts([]); // ƒê·∫£m b·∫£o posts l√† m·∫£ng r·ªóng n·∫øu l·ªói
        } finally {
            setIsLoading(false);
        }
    };

    const deletePost = async (postId) => {
        clearMessages();
        const token = sessionStorage.getItem("token");
        if (!token) {
            setError("B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p ho·∫∑c token ƒë√£ h·∫øt h·∫°n!");
            return;
        }

        if (window.confirm(`B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a b√†i vi·∫øt ID: ${postId}?`)) {
            setIsLoading(true);
            try {
                await axios.delete(`${API_BASE_URL}/delete-post/${postId}`, {
                    headers: { Authorization: `Bearer ${token}` },
                });
                setSuccessMessage(`B√†i vi·∫øt ID: ${postId} ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng.`);
                fetchPosts(); // T·∫£i l·∫°i danh s√°ch
            } catch (error) {
                console.error("L·ªói khi x√≥a b√†i vi·∫øt:", error);
                setError(error.response?.data?.message || "L·ªói khi x√≥a b√†i vi·∫øt! Ki·ªÉm tra quy·ªÅn h·∫°n.");
            } finally {
                setIsLoading(false);
            }
        }
    };

    const handleShowEditModal = (post) => {
        clearMessages();
        setSelectedPost(post);
        setFormData({
            id: post.id,
            title: post.title || "",
            content: Array.isArray(post.content) ? post.content.join("\n") : (post.content || ""),
            imgUrl: Array.isArray(post.imgUrl) ? post.imgUrl.join("\n") : (post.imgUrl || ""),
            videoUrl: Array.isArray(post.videoUrl) ? post.videoUrl.join("\n") : (post.videoUrl || ""),
        });
        setShowEditModal(true);
    };

    const handleShowCreateModal = () => {
        clearMessages();
        setNewPost({ title: "", content: "", imgUrl: "", videoUrl: "" }); // Reset form t·∫°o m·ªõi
        setShowCreateModal(true);
    };

    const handleCreatePost = async () => {
        clearMessages();
        const token = sessionStorage.getItem("token");
        if (!token) {
            setError("B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p ho·∫∑c token ƒë√£ h·∫øt h·∫°n!");
            return;
        }

        if (!newPost.title.trim()) {
            setError("Ti√™u ƒë·ªÅ kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!");
            return;
        }
        // N·ªôi dung c√≥ th·ªÉ t√πy ch·ªçn kh√¥ng b·∫Øt bu·ªôc, t√πy theo y√™u c·∫ßu

        setIsLoading(true);
        try {
            const newPostData = {
                title: newPost.title.trim(),
                content: newPost.content ? newPost.content.split("\n").filter(line => line.trim() !== "") : [],
                imgUrl: newPost.imgUrl ? newPost.imgUrl.split("\n").filter(line => line.trim() !== "") : [],
                videoUrl: newPost.videoUrl ? newPost.videoUrl.split("\n").filter(line => line.trim() !== "") : [],
            };

            await axios.post(`${API_BASE_URL}/create-post`, newPostData, {
                headers: {
                    Authorization: `Bearer ${token}`,
                    "Content-Type": "application/json",
                },
            });

            setSuccessMessage("‚úÖ B√†i vi·∫øt m·ªõi ƒë√£ ƒë∆∞·ª£c th√™m th√†nh c√¥ng!");
            setShowCreateModal(false);
            setNewPost({ title: "", content: "", imgUrl: "", videoUrl: "" }); // Reset newPost state
            fetchPosts(); // T·∫£i l·∫°i danh s√°ch
        } catch (error) {
            console.error("L·ªói khi th√™m b√†i vi·∫øt:", error);
            setError(error.response?.data?.message || error.response?.data || "‚ùå Th√™m b√†i vi·∫øt th·∫•t b·∫°i!");
        } finally {
            setIsLoading(false);
        }
    };

    const handleSaveChanges = async () => {
        clearMessages();
        const token = sessionStorage.getItem("token");
        if (!token) {
            setError("B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p ho·∫∑c token ƒë√£ h·∫øt h·∫°n!");
            return;
        }

        if (!formData.title.trim()) {
            setError("Ti√™u ƒë·ªÅ kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!");
            return;
        }

        setIsLoading(true);
        try {
            const updatedPostPayload = {
                title: formData.title.trim(),
                content: formData.content ? formData.content.split("\n").filter(line => line.trim() !== "") : [],
                imgUrl: formData.imgUrl ? formData.imgUrl.split("\n").filter(line => line.trim() !== "") : [],
                videoUrl: formData.videoUrl ? formData.videoUrl.split("\n").filter(line => line.trim() !== "") : [],
            };

            await axios.put( // S·ª≠ d·ª•ng PUT cho c·∫≠p nh·∫≠t l√† chu·∫©n h∆°n, nh∆∞ng API c·ªßa b·∫°n d√πng POST
                `${API_BASE_URL}/update-post/${selectedPost.id}`,
                updatedPostPayload,
                {
                    headers: {
                        Authorization: `Bearer ${token}`,
                        "Content-Type": "application/json",
                    },
                }
            );

            setSuccessMessage("‚úÖ B√†i vi·∫øt ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng!");
            setShowEditModal(false);
            fetchPosts(); // T·∫£i l·∫°i danh s√°ch
        } catch (error) {
            console.error("L·ªói khi c·∫≠p nh·∫≠t b√†i vi·∫øt:", error);
            setError(error.response?.data?.message || error.response?.data || "‚ùå C·∫≠p nh·∫≠t th·∫•t b·∫°i! H√£y ki·ªÉm tra l·∫°i.");
        } finally {
            setIsLoading(false);
        }
    };

    // --- H√†m render n·ªôi dung (gi√∫p g·ªçn g√†ng h∆°n) ---
    const renderContent = (contentArray) => {
        if (!Array.isArray(contentArray) || contentArray.length === 0) {
            return <span className="text-muted fst-italic">Kh√¥ng c√≥ n·ªôi dung</span>;
        }
        return contentArray.map((line, index) => (
            <React.Fragment key={index}>
                {line}
                {index < contentArray.length - 1 && <br />}
            </React.Fragment>
        ));
    };

    const renderImageLinks = (imgUrls) => {
        if (!Array.isArray(imgUrls) || imgUrls.length === 0) {
            return <span className="text-muted fst-italic">Kh√¥ng c√≥ ·∫£nh</span>;
        }
        return imgUrls.map((img, index) => (
            img.trim() ? // Ch·ªâ render n·∫øu URL kh√¥ng r·ªóng
            <a key={index} href={img} target="_blank" rel="noopener noreferrer" className="me-2 mb-2 d-inline-block">
                <img
                    src={img}
                    alt={`Post image ${index + 1}`}
                    style={{ width: "80px", height: "80px", objectFit: "cover", border: "1px solid #ddd", borderRadius: "4px" }}
                    onError={(e) => { e.target.style.display = 'none'; /* ·∫®n n·∫øu ·∫£nh l·ªói */ }}
                />
            </a> : null
        ));
    };

    const renderVideoLinks = (videoUrls) => {
        if (!Array.isArray(videoUrls) || videoUrls.length === 0) {
            return <span className="text-muted fst-italic">Kh√¥ng c√≥ video</span>;
        }
        return videoUrls.map((video, index) => (
            video.trim() ? // Ch·ªâ render n·∫øu URL kh√¥ng r·ªóng
            <a key={index} href={video} target="_blank" rel="noopener noreferrer" className="btn btn-outline-info btn-sm me-2 mb-2">
                <FaPlayCircle className="me-1"/> Video {index + 1}
            </a> : null
        ));
    };


    return (
        <Container className="mt-4 mb-5">
            <h2 className="text-center mb-4">üéØ Qu·∫£n l√Ω B√†i Vi·∫øt</h2>

            {isLoading && ( // Spinner chung cho c√°c h√†nh ƒë·ªông ch√≠nh
                <div className="text-center my-3">
                    <Spinner animation="border" variant="primary" />
                    <p className="mt-2 text-muted">ƒêang x·ª≠ l√Ω...</p>
                </div>
            )}
            {error && !showEditModal && !showCreateModal && ( // Ch·ªâ hi·ªÉn th·ªã l·ªói chung n·∫øu kh√¥ng c√≥ modal n√†o m·ªü
                <Alert variant="danger" onClose={clearMessages} dismissible className="d-flex align-items-center">
                    <FaExclamationTriangle className="me-2"/> {error}
                </Alert>
            )}
            {successMessage && !showEditModal && !showCreateModal && (
                <Alert variant="success" onClose={clearMessages} dismissible className="d-flex align-items-center">
                    <FaCheckCircle className="me-2"/> {successMessage}
                </Alert>
            )}

            <Card className="p-3 shadow-sm">
                <div className="d-flex justify-content-end mb-3"> {/* Chuy·ªÉn n√∫t Th√™m sang ph·∫£i */}
                    <Button variant="primary" onClick={handleShowCreateModal} disabled={isLoading}>
                        <FaPlus className="me-2" /> Th√™m b√†i vi·∫øt m·ªõi
                    </Button>
                </div>
                <div className="table-responsive">
                    <Table striped bordered hover responsive className="table-custom align-middle">
                        <thead>
                            <tr>
                                <th style={{width: '5%'}}>ID</th>
                                <th style={{width: '20%'}}>Ti√™u ƒë·ªÅ</th>
                                <th style={{width: '30%'}}>N·ªôi dung (m·ªôt ph·∫ßn)</th>
                                <th style={{width: '20%'}}>H√¨nh ·∫£nh</th>
                                <th style={{width: '15%'}}>Video</th>
                                <th style={{width: '10%'}}>H√†nh ƒë·ªông</th>
                            </tr>
                        </thead>
                        <tbody>
                            {posts.length > 0 ? (
                                posts.map((post) => (
                                    <tr key={post.id}>
                                        <td>{post.id}</td>
                                        <td className="text-start">{post.title || <span className="text-muted fst-italic">Kh√¥ng c√≥ ti√™u ƒë·ªÅ</span>}</td>
                                        <td className="text-start" style={{ whiteSpace: "pre-line", maxHeight: '100px', overflowY: 'auto' }}>
                                            {/* Hi·ªÉn th·ªã m·ªôt ph·∫ßn n·ªôi dung */}
                                            {Array.isArray(post.content) ?
                                                (post.content.join("\n").substring(0, 150) + (post.content.join("\n").length > 150 ? "..." : ""))
                                                : <span className="text-muted fst-italic">Kh√¥ng c√≥ n·ªôi dung</span>
                                            }
                                        </td>
                                        <td>
                                            {renderImageLinks(post.imgUrl)}
                                        </td>
                                        <td>
                                            {renderVideoLinks(post.videoUrl)}
                                        </td>
                                        <td>
                                            <div className="d-flex flex-column flex-sm-row justify-content-center gap-2">
                                                <Button variant="warning" size="sm" className="d-flex align-items-center justify-content-center" onClick={() => handleShowEditModal(post)} disabled={isLoading}>
                                                    <FaEdit className="me-1" /> S·ª≠a
                                                </Button>
                                                <Button variant="danger" size="sm" className="d-flex align-items-center justify-content-center" onClick={() => deletePost(post.id)} disabled={isLoading}>
                                                    <FaTrash className="me-1" /> X√≥a
                                                </Button>
                                            </div>
                                        </td>
                                    </tr>
                                ))
                            ) : (
                                <tr>
                                    <td colSpan="6" className="text-center p-4">
                                        {isLoading ? "ƒêang t·∫£i..." : "üöÄ Kh√¥ng c√≥ b√†i vi·∫øt n√†o. H√£y th√™m b√†i vi·∫øt m·ªõi!"}
                                    </td>
                                </tr>
                            )}
                        </tbody>
                    </Table>
                </div>
            </Card>

            {/* Modal Ch·ªânh S·ª≠a B√†i Vi·∫øt */}
            <Modal show={showEditModal} onHide={() => setShowEditModal(false)} backdrop="static" keyboard={false} centered>
                <Modal.Header closeButton>
                    <Modal.Title><FaEdit className="me-2"/>Ch·ªânh s·ª≠a b√†i vi·∫øt (ID: {selectedPost?.id})</Modal.Title>
                </Modal.Header>
                <Modal.Body>
                    {error && (showEditModal || showCreateModal) && ( // Hi·ªÉn th·ªã l·ªói trong modal
                        <Alert variant="danger" onClose={clearMessages} dismissible>{error}</Alert>
                    )}
                    <Form>
                        <Form.Group controlId="editTitle" className="mb-3">
                            <Form.Label>üìù Ti√™u ƒë·ªÅ</Form.Label>
                            <Form.Control
                                type="text"
                                placeholder="Nh·∫≠p ti√™u ƒë·ªÅ b√†i vi·∫øt"
                                value={formData.title}
                                onChange={(e) => setFormData({ ...formData, title: e.target.value })}
                                required
                            />
                        </Form.Group>
                        <Form.Group controlId="editContent" className="mb-3">
                            <Form.Label>üìñ N·ªôi dung (m·ªói ƒëo·∫°n tr√™n m·ªôt d√≤ng)</Form.Label>
                            <Form.Control
                                as="textarea"
                                rows={5}
                                placeholder="Nh·∫≠p n·ªôi dung b√†i vi·∫øt..."
                                value={formData.content}
                                onChange={(e) => setFormData({ ...formData, content: e.target.value })}
                            />
                        </Form.Group>
                        <Form.Group controlId="editImgUrl" className="mb-3">
                            <Form.Label>üñº Link H√¨nh ·∫£nh (m·ªói link tr√™n m·ªôt d√≤ng)</Form.Label>
                            <Form.Control
                                as="textarea"
                                rows={3}
                                placeholder="https://example.com/image1.jpg
https://example.com/image2.png"
                                value={formData.imgUrl}
                                onChange={(e) => setFormData({ ...formData, imgUrl: e.target.value })}
                            />
                        </Form.Group>
                        <Form.Group controlId="editVideoUrl" className="mb-3">
                            <Form.Label>üé• Link Video (m·ªói link tr√™n m·ªôt d√≤ng)</Form.Label>
                            <Form.Control
                                as="textarea"
                                rows={3}
                                placeholder="https://youtube.com/watch?v=video1
https://vimeo.com/video2"
                                value={formData.videoUrl}
                                onChange={(e) => setFormData({ ...formData, videoUrl: e.target.value })}
                            />
                        </Form.Group>
                    </Form>
                </Modal.Body>
                <Modal.Footer>
                    <Button variant="secondary" onClick={() => setShowEditModal(false)} disabled={isLoading}>
                        <FaTimes className="me-1"/> H·ªßy
                    </Button>
                    <Button variant="success" onClick={handleSaveChanges} disabled={isLoading}>
                        {isLoading ? <Spinner as="span" animation="border" size="sm" role="status" aria-hidden="true" className="me-1"/> : <FaSave className="me-1"/>}
                        L∆∞u thay ƒë·ªïi
                    </Button>
                </Modal.Footer>
            </Modal>

            {/* Modal Th√™m B√†i Vi·∫øt M·ªõi */}
            <Modal show={showCreateModal} onHide={() => setShowCreateModal(false)} backdrop="static" keyboard={false} centered>
                <Modal.Header closeButton>
                    <Modal.Title><FaPlus className="me-2"/>Th√™m b√†i vi·∫øt m·ªõi</Modal.Title>
                </Modal.Header>
                <Modal.Body>
                     {error && (showEditModal || showCreateModal) && (
                        <Alert variant="danger" onClose={clearMessages} dismissible>{error}</Alert>
                    )}
                    <Form>
                        <Form.Group controlId="newTitle" className="mb-3">
                            <Form.Label>üìù Ti√™u ƒë·ªÅ</Form.Label>
                            <Form.Control type="text" placeholder="Nh·∫≠p ti√™u ƒë·ªÅ b√†i vi·∫øt" value={newPost.title} onChange={(e) => setNewPost({ ...newPost, title: e.target.value })} required />
                        </Form.Group>
                        <Form.Group controlId="newContent" className="mb-3">
                            <Form.Label>üìñ N·ªôi dung (m·ªói ƒëo·∫°n tr√™n m·ªôt d√≤ng)</Form.Label>
                            <Form.Control as="textarea" rows={5} placeholder="Nh·∫≠p n·ªôi dung b√†i vi·∫øt..." value={newPost.content} onChange={(e) => setNewPost({ ...newPost, content: e.target.value })} />
                        </Form.Group>
                        <Form.Group controlId="newImgUrl" className="mb-3">
                            <Form.Label>üñº Link H√¨nh ·∫£nh (m·ªói link tr√™n m·ªôt d√≤ng)</Form.Label>
                            <Form.Control as="textarea" rows={3} placeholder="https://example.com/image1.jpg
https://example.com/image2.png" value={newPost.imgUrl} onChange={(e) => setNewPost({ ...newPost, imgUrl: e.target.value })} />
                        </Form.Group>
                        <Form.Group controlId="newVideoUrl" className="mb-3">
                            <Form.Label>üé• Link Video (m·ªói link tr√™n m·ªôt d√≤ng)</Form.Label>
                            <Form.Control as="textarea" rows={3} placeholder="https://youtube.com/watch?v=video1
https://vimeo.com/video2" value={newPost.videoUrl} onChange={(e) => setNewPost({ ...newPost, videoUrl: e.target.value })} />
                        </Form.Group>
                    </Form>
                </Modal.Body>
                <Modal.Footer>
                    <Button variant="secondary" onClick={() => setShowCreateModal(false)} disabled={isLoading}>
                        <FaTimes className="me-1"/> H·ªßy
                    </Button>
                    <Button variant="success" onClick={handleCreatePost} disabled={isLoading}>
                         {isLoading ? <Spinner as="span" animation="border" size="sm" role="status" aria-hidden="true" className="me-1"/> : <FaSave className="me-1"/>}
                        Th√™m b√†i vi·∫øt
                    </Button>
                </Modal.Footer>
            </Modal>

            {/* CSS Custom (gi·ªØ nguy√™n ho·∫∑c t√πy ch·ªânh th√™m) */}
            <style>
                {`
                .table-custom thead {
                    /* background-color: #003366; */ /* T·∫°m th·ªùi b·ªè m√†u n·ªÅn n√†y ƒë·ªÉ d√πng table-dark */
                    /* color: white; */
                    text-align: center;
                }
                .table-custom td, .table-custom th {
                    /* text-align: center; */ /* B·ªè cƒÉn gi·ªØa m·∫∑c ƒë·ªãnh cho t·∫•t c·∫£, ƒë·ªÉ text-start c√≥ t√°c d·ª•ng */
                    vertical-align: middle;
                }
                .btn:hover {
                    /* transform: scale(1.05); */ /* Hi·ªáu ·ª©ng n√†y c√≥ th·ªÉ g√¢y nh·∫£y layout nh·∫π */
                }
                .table-custom img {
                    transition: transform 0.2s ease-in-out;
                }
                .table-custom img:hover {
                    transform: scale(1.1);
                }
                `}
            </style>
        </Container>
    );
};

export default PostManagement;